{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import json\n",
    "import gzip\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from torch.optim.lr_scheduler import StepLR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     transcript_id  position flanking_nucleotide  dwelling_time_(-1)  \\\n",
      "0  ENST00000000233       244             AAGACCA             0.00299   \n",
      "1  ENST00000000233       244             AAGACCA             0.00631   \n",
      "2  ENST00000000233       244             AAGACCA             0.00465   \n",
      "3  ENST00000000233       244             AAGACCA             0.00398   \n",
      "4  ENST00000000233       244             AAGACCA             0.00664   \n",
      "\n",
      "   std_dev_(-1)  mean_signal_(-1)  dwelling_time_central  std_dev_central  \\\n",
      "0          2.06             125.0                0.01770            10.40   \n",
      "1          2.53             125.0                0.00844             4.67   \n",
      "2          3.92             109.0                0.01360            12.00   \n",
      "3          2.06             125.0                0.00830             5.01   \n",
      "4          2.92             120.0                0.00266             3.94   \n",
      "\n",
      "   mean_signal_central  dwelling_time_(+1)  std_dev_(+1)  mean_signal_(+1)  \n",
      "0                122.0             0.00930         10.90              84.1  \n",
      "1                126.0             0.01030          6.30              80.9  \n",
      "2                124.0             0.00498          2.13              79.6  \n",
      "3                130.0             0.00498          3.78              80.4  \n",
      "4                129.0             0.01300          7.15              82.2  \n"
     ]
    }
   ],
   "source": [
    "# parse the features\n",
    "\n",
    "def parse_features(feature_file_path):\n",
    "    rows = []\n",
    "\n",
    "    with gzip.open(feature_file_path, 'rt', encoding='utf-8') as file:\n",
    "        for line in file:\n",
    "            data = json.loads(line)\n",
    "\n",
    "            for transcript_id, positions in data.items():\n",
    "                for position, flanking_data in positions.items():\n",
    "                    for flanking_nucleotide, features_list in flanking_data.items():\n",
    "                        for features in features_list:\n",
    "                            row = {\n",
    "                                \"transcript_id\": transcript_id,\n",
    "                                \"position\": int(position),\n",
    "                                \"flanking_nucleotide\": flanking_nucleotide,\n",
    "                                \"dwelling_time_(-1)\": features[0],\n",
    "                                \"std_dev_(-1)\": features[1],\n",
    "                                \"mean_signal_(-1)\": features[2],\n",
    "                                \"dwelling_time_central\": features[3],\n",
    "                                \"std_dev_central\": features[4],\n",
    "                                \"mean_signal_central\": features[5],\n",
    "                                \"dwelling_time_(+1)\": features[6],\n",
    "                                \"std_dev_(+1)\": features[7],\n",
    "                                \"mean_signal_(+1)\": features[8]\n",
    "                            }\n",
    "                            rows.append(row)  # Append each parsed entry to rows\n",
    "\n",
    "    return pd.DataFrame(rows)\n",
    "\n",
    "\n",
    "# parse the dataset\n",
    "features_df = parse_features(\"../data/dataset0.json.gz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# parse the labels\n",
    "\n",
    "def parse_labels(label_file_path):\n",
    "    data = []\n",
    "    with open(label_file_path, 'r') as f:\n",
    "        f.readline() # first line is header\n",
    "        for line in f:\n",
    "            gene_id, transcript_id, position, label = line.strip().split(',')\n",
    "            data.append({\n",
    "                'gene_id': gene_id,\n",
    "                'transcript_id': transcript_id,\n",
    "                'position': int(position),\n",
    "                'label': int(label)\n",
    "            })\n",
    "    return pd.DataFrame(data)\n",
    "\n",
    "label_df = parse_labels(\"../data/data.info.labelled\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_df = features_df.groupby(['transcript_id', 'position', 'flanking_nucleotide']).mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add and scale features\n",
    "def preprocessing(df):\n",
    "    processed_df = df.copy()\n",
    "    processed_df['relative_position'] = processed_df['position'] / processed_df.groupby('transcript_id')['position'].transform('max')\n",
    "    processed_df['dwelling_time_diff'] = processed_df['dwelling_time_(+1)'] - processed_df['dwelling_time_(-1)']\n",
    "    processed_df['std_dev_diff'] = processed_df['std_dev_(+1)'] - processed_df['std_dev_(-1)']\n",
    "\n",
    "    scaler = StandardScaler()\n",
    "    # numeric_columns = ['dwelling_time_(-1)', 'mean_signal_(-1)', 'mean_range_(-1)', 'mean_std_dev_(-1)',\n",
    "    #                'dwelling_time_central', 'mean_signal_central', 'mean_range_central', 'mean_std_dev_central',\n",
    "    #                'dwelling_time_(+1)', 'mean_signal_(+1)', 'mean_range_(+1)', 'mean_std_dev_(+1)',\n",
    "    numeric_columns = ['dwelling_time_(-1)', 'std_dev_(-1)', 'mean_signal_(-1)',\n",
    "                       'dwelling_time_central', 'std_dev_central', 'mean_signal_central',\n",
    "                        'dwelling_time_(+1)', 'std_dev_(+1)', 'mean_signal_(+1)',\n",
    "                        'relative_position', 'dwelling_time_diff', 'std_dev_diff']\n",
    "\n",
    "    processed_df[numeric_columns] = scaler.fit_transform(processed_df[numeric_columns])\n",
    "\n",
    "    return processed_df\n",
    "\n",
    "processed_df = preprocessing(combined_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# encode the nucleotides\n",
    "# pd.set_option(\"future.no_silent_downcasting\", True) # to avoid warning\n",
    "\n",
    "def encode_nucleotide(df):\n",
    "    df = df.copy()\n",
    "\n",
    "    # split into 7 columns\n",
    "    nucleotides = df['flanking_nucleotide'].apply(lambda x: pd.Series(list(x)))\n",
    "    nucleotides.columns = ['nucleotide_' + str(i) for i in range(7)]\n",
    "\n",
    "    # encode the nucleotides\n",
    "    nucleotides = nucleotides.replace({'A': 1, 'C': 2, 'G': 3, 'T': 4})\n",
    "\n",
    "    # scale the encoded nucleotides\n",
    "    scaler = StandardScaler()\n",
    "    nucleotides_scaled = scaler.fit_transform(nucleotides)\n",
    "\n",
    "    # concatenate the encoded nucleotides with the original dataframe\n",
    "    df = pd.concat([df.reset_index(drop=True), pd.DataFrame(nucleotides_scaled, columns=nucleotides.columns)], axis=1)\n",
    "\n",
    "    # drop the original nucleotide column\n",
    "    df = df.drop('flanking_nucleotide', axis=1)\n",
    "    \n",
    "    return df\n",
    "\n",
    "encoded_df = encode_nucleotide(processed_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split by genes\n",
    "unique_genes = label_df['gene_id'].unique()\n",
    "train_genes, test_genes = train_test_split(unique_genes, test_size=0.2, random_state=49)\n",
    "\n",
    "# split transcripts based on genes\n",
    "train_transcript = label_df[label_df['gene_id'].isin(train_genes)][\"transcript_id\"]\n",
    "test_transcript = label_df[label_df['gene_id'].isin(test_genes)][\"transcript_id\"]\n",
    "train_df = encoded_df[encoded_df['transcript_id'].isin(train_transcript)]\n",
    "test_df = encoded_df[encoded_df['transcript_id'].isin(test_transcript)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge data with labels\n",
    "train_labelled = pd.merge(train_df, label_df[['transcript_id', 'position', 'label']], \n",
    "                     on=['transcript_id', 'position'], \n",
    "                     how='left')\n",
    "\n",
    "test_labelled = pd.merge(test_df, label_df[['transcript_id', 'position', 'label']],\n",
    "                    on=['transcript_id', 'position'],\n",
    "                    how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# inputs\n",
    "train = train_labelled.copy()\n",
    "test = test_labelled.copy()\n",
    "\n",
    "# drop rows with NaN values\n",
    "test = test.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and labels\n",
    "X_train = train.drop(columns=['transcript_id', 'position', 'label'])\n",
    "y_train = train['label']\n",
    "\n",
    "X_test = test.drop(columns=['transcript_id', 'position', 'label'])\n",
    "y_test = test['label']\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "X_train = torch.tensor(X_train.values, dtype=torch.float32)\n",
    "y_train = torch.tensor(y_train.values, dtype=torch.float32)\n",
    "X_test = torch.tensor(X_test.values, dtype=torch.float32)\n",
    "y_test = torch.tensor(y_test.values, dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [10/100], Loss: 0.1952\n",
      "Epoch [20/100], Loss: 0.1638\n",
      "Epoch [30/100], Loss: 0.1443\n",
      "Epoch [40/100], Loss: 0.1397\n",
      "Epoch [50/100], Loss: 0.1360\n",
      "Epoch [60/100], Loss: 0.1327\n",
      "Epoch [70/100], Loss: 0.1296\n",
      "Epoch [80/100], Loss: 0.1266\n",
      "Epoch [90/100], Loss: 0.1241\n",
      "Epoch [100/100], Loss: 0.1224\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(42)\n",
    "\n",
    "class NeuralNetwork(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.layer1 = nn.Linear(X_train.shape[1], 32)\n",
    "        self.layer2 = nn.Linear(32, 1)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.relu(self.layer1(x))\n",
    "        x = self.sigmoid(self.layer2(x))\n",
    "        return x\n",
    "    \n",
    "# Initialize the model, loss function, and optimizer\n",
    "model = NeuralNetwork()\n",
    "loss_fn = nn.BCELoss() # Binary Cross-Entropy Loss\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.1)\n",
    "\n",
    "# Train the model\n",
    "num_epochs = 100\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    outputs = model(X_train).squeeze()\n",
    "    loss = loss_fn(outputs, y_train)\n",
    "    optimizer.zero_grad()\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    if (epoch + 1) % 10 == 0:\n",
    "        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.4f}')\n",
    "\n",
    "# save the model\n",
    "torch.save(model.state_dict(), '../model/model_checkpoint.pth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_3597/948266714.py:3: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load('../model/model_checkpoint.pth'))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# load a pretrained model\n",
    "model = NeuralNetwork()\n",
    "model.load_state_dict(torch.load('../model/model_checkpoint.pth'))\n",
    "\n",
    "# Evaluate the model\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    y_pred_proba = model(X_test).squeeze()\n",
    "    auc = roc_auc_score(y_test, y_pred_proba)\n",
    "    # plot roc-auc\n",
    "    fpr, tpr, _ = roc_curve(y_test, y_pred_proba)\n",
    "    plt.plot(fpr, tpr)\n",
    "    plt.annotate(f'AUC = {auc:.2f}', (0.6, 0.4))\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC Curve')\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
